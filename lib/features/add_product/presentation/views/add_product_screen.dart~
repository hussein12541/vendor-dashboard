import 'dart:io';
import 'dart:typed_data';
import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:path_provider/path_provider.dart';
import 'package:store_dash_board/features/add_product/presentation/views/widgets/form_fields_section.dart';
import 'package:store_dash_board/features/add_product/presentation/views/widgets/image_section.dart';
import 'package:uuid/uuid.dart';
import 'package:flutter/foundation.dart' show kIsWeb;

import '../../data/models/category/category_model.dart';
import '../../data/models/store/store_model.dart';
import '../manger/add_product_cubit/cubit/add_product_cubit.dart';

class AddProductScreen extends StatefulWidget {
  const AddProductScreen({super.key});

  @override
  State<AddProductScreen> createState() => _AddProductScreenState();
}

class _AddProductScreenState extends State<AddProductScreen> {
  final GlobalKey<FormState> _formKey = GlobalKey<FormState>();
  final TextEditingController _arabicNameController = TextEditingController();
  final TextEditingController _englishNameController = TextEditingController();
  final TextEditingController _arabicDescController = TextEditingController();
  final TextEditingController _englishDescController = TextEditingController();
  final TextEditingController _priceController = TextEditingController();
  final TextEditingController _oldPriceController = TextEditingController();
  final TextEditingController _weightController = TextEditingController();
  final TextEditingController _quantityController = TextEditingController();
  final TextEditingController _imageUrlController = TextEditingController();

  CategoryModel? _selectedCategory;
  StoreModel? _selectedStore;
  bool _isShow = true;
  bool _isUploading = false;
  String? _previewImageUrl;
  Uint8List? _localImageBytes;

  @override
  void initState() {
    super.initState();
    _imageUrlController.addListener(_updatePreview);
    context.read<AddProductCubit>().getCategories();
  }

  void _updatePreview() {
    setState(() {
      _previewImageUrl = _imageUrlController.text.isNotEmpty
          ? _imageUrlController.text
          : null;
      if (_previewImageUrl != null) {
        _localImageBytes = null; // Clear local image when URL is entered
      }
    });
  }


  Future<File?> _convertBytesToFile(Uint8List bytes, String fileName) async {
    if (kIsWeb) {
      // في الويب مش هنعمل File، هنرجع null ونتعامل بـ pickedImageBytes
      return null;
    } else {
      final tempDir = await getTemporaryDirectory();
      final file = File('${tempDir.path}/$fileName');
      await file.writeAsBytes(bytes);
      return file;
    }
  }


  Future<void> _saveProduct({
    required File? imageFile,
    required Uint8List? pickedImageBytes,
    required String store_id,
    required String category_id,
    required double price,
    required int quantity,
    required String? image_url,
    required String english_name,
    required String english_description,
    required String arabic_description,
    required String arabic_name,
    required double old_price,
    required String? delete_image_url,
    required bool is_show,
    required double weight,
  }) async {
    if (_formKey.currentState!.validate()) {
      await context.read<AddProductCubit>().addProduct(
        imageFile: imageFile,
        pickedImageBytes:pickedImageBytes ,
        arabic_description: arabic_description,
        store_id: store_id,
        arabic_name: arabic_name,
        category_id: category_id,
        delete_image_url: delete_image_url,
        english_description: english_description,
        english_name: english_name,
        image_url: image_url,
        is_show: is_show,
        old_price: old_price,
        price: price,
        quantity: quantity,
        weight: weight,
      );
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Text(
           "تم حفظ المنتج بنجاح",
            textAlign: TextAlign.center,
            style: const TextStyle(fontSize: 16),
          ),
          backgroundColor: Colors.green,
          duration: const Duration(seconds: 3),
          behavior: SnackBarBehavior.floating,
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(12),
          ),
        ),
      );
    }
  }

  @override
  void dispose() {
    _imageUrlController.removeListener(_updatePreview);
    _arabicNameController.dispose();
    _englishNameController.dispose();
    _arabicDescController.dispose();
    _englishDescController.dispose();
    _priceController.dispose();
    _oldPriceController.dispose();
    _weightController.dispose();
    _quantityController.dispose();
    _imageUrlController.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    final size = MediaQuery.of(context).size;
    final isLargeScreen = size.width > 1000;

    return 
       BlocBuilder<AddProductCubit, AddProductState>(
        builder: (context, state) {
          return (state is GetCategoriesSuccess||state is  AddProductSuccess)
              ? Scaffold(
                  body: Center(
                    child: Container(
                      color: Colors.grey.shade50,
                      padding: EdgeInsets.symmetric(
                        horizontal: size.width > 1200 ? size.width * 0.1 : 32,
                        vertical: 24,
                      ),
                      child: Center(
                        child: ConstrainedBox(
                          constraints: const BoxConstraints(maxWidth: 1400),
                          child: Form(
                            key: _formKey,
                            child: isLargeScreen
                                ? Row(
                                    crossAxisAlignment:
                                        CrossAxisAlignment.center,
                                    children: [
                                      Expanded(
                                        flex: 2,
                                        child: FormFieldsSection(
                                          arabicNameController:
                                              _arabicNameController,
                                          englishNameController:
                                              _englishNameController,
                                          arabicDescController:
                                              _arabicDescController,
                                          englishDescController:
                                              _englishDescController,
                                          priceController: _priceController,
                                          oldPriceController:
                                              _oldPriceController,
                                          weightController: _weightController,
                                          quantityController:
                                              _quantityController,
                                          selectedCategory: _selectedCategory,
                                          selectedStore: _selectedStore,
                                          isShow: _isShow,
                                          isUploading: _isUploading,
                                          onCategoryChanged: (newValue) {
                                            setState(() {
                                              _selectedCategory = newValue;
                                            });
                                          }, onStoreChanged: (newValue) {
                                            setState(() {
                                              _selectedStore = newValue;
                                            });
                                          },
                                          onShowChanged: (value) {
                                            setState(() {
                                              _isShow = value;
                                            });
                                          },
                                          onSave: () async {
                                            File? imageFile;
                                            if (_localImageBytes != null) {
                                              imageFile =
                                                  await _convertBytesToFile(
                                                    _localImageBytes!,
                                                    Uuid().v4() + '.png',
                                                  );
                                            }
                                            _saveProduct(
                                              imageFile:
                                                  imageFile, // أو الملف اللي اخترته
                                              pickedImageBytes: _localImageBytes,
                                              store_id: _selectedStore!.id,

                                              category_id:
                                                  _selectedCategory!.id ,
                                              price:
                                                  double.tryParse(
                                                    _priceController.text,
                                                  ) ??
                                                  0.0,
                                              quantity:
                                                  int.tryParse(
                                                    _quantityController.text,
                                                  ) ??
                                                  0,
                                              image_url:
                                                  _imageUrlController
                                                      .text
                                                      .isNotEmpty
                                                  ? _imageUrlController.text
                                                  : null,
                                              english_name:
                                                  _englishNameController.text,
                                              english_description:
                                                  _englishDescController.text,
                                              arabic_description:
                                                  _arabicDescController.text,
                                              arabic_name:
                                                  _arabicNameController.text,
                                              old_price:
                                                  double.tryParse(
                                                    _oldPriceController.text,
                                                  ) ??
                                                  0.0,
                                              delete_image_url:
                                                  null, // ده هيتظبط بعد الرفع
                                              is_show: _isShow,
                                              weight:
                                                  double.tryParse(
                                                    _weightController.text,
                                                  ) ??
                                                  0.0,
                                            );
                                          },
                                        ),
                                      ),
                                      const SizedBox(width: 40),
                                      Expanded(
                                        child: ImageSection(
                                          imageUrlController:
                                              _imageUrlController,
                                          previewImageUrl: _previewImageUrl,
                                          localImageBytes: _localImageBytes,
                                          onImagePicked: (bytes) {
                                            setState(() {
                                              _localImageBytes = bytes;
                                              _previewImageUrl = null;
                                              _imageUrlController.clear();
                                            });
                                          },
                                        ),
                                      ),
                                    ],
                                  )
                                : SingleChildScrollView(
                                    child: Column(
                                      crossAxisAlignment:
                                          CrossAxisAlignment.start,
                                      children: [
                                        ImageSection(
                                          imageUrlController:
                                              _imageUrlController,
                                          previewImageUrl: _previewImageUrl,
                                          localImageBytes: _localImageBytes,
                                          onImagePicked: (bytes) {
                                            setState(() {
                                              _localImageBytes = bytes;
                                              _previewImageUrl = null;
                                              _imageUrlController.clear();
                                            });
                                          },
                                        ),
                                        const SizedBox(height: 32),
                                        FormFieldsSection(
                                          arabicNameController:
                                              _arabicNameController,
                                          englishNameController:
                                              _englishNameController,
                                          arabicDescController:
                                              _arabicDescController,
                                          englishDescController:
                                              _englishDescController,
                                          priceController: _priceController,
                                          oldPriceController:
                                              _oldPriceController,
                                          weightController: _weightController,
                                          quantityController:
                                              _quantityController,
                                          selectedCategory: _selectedCategory,
                                          selectedStore: _selectedStore,
                                          isShow: _isShow,
                                          isUploading: _isUploading,
                                          onCategoryChanged: (newValue) {
                                            setState(() {
                                              _selectedCategory = newValue;
                                            });
                                          }, onStoreChanged: (newValue) {
                                            setState(() {
                                              _selectedStore = newValue;
                                            });
                                          },
                                          onShowChanged: (value) {
                                            setState(() {
                                              _isShow = value;
                                            });
                                          },
                                          onSave: () async {
                                            File? imageFile;
                                            if (_localImageBytes != null) {
                                              imageFile =
                                                  await _convertBytesToFile(
                                                    _localImageBytes!,
                                                    Uuid().v4() + '.png',
                                                  );
                                            }
                                            _saveProduct(
                                              imageFile:
                                                  imageFile, // أو الملف اللي اخترته
                                              pickedImageBytes: _localImageBytes,

                                              store_id: _selectedStore!.id,
                                              category_id:
                                                  _selectedCategory!.id,
                                              price:
                                                  double.tryParse(
                                                    _priceController.text,
                                                  ) ??
                                                  0.0,
                                              quantity:
                                                  int.tryParse(
                                                    _quantityController.text,
                                                  ) ??
                                                  0,
                                              image_url:
                                                  _imageUrlController
                                                      .text
                                                      .isNotEmpty
                                                  ? _imageUrlController.text
                                                  : null,
                                              english_name:
                                                  _englishNameController.text,
                                              english_description:
                                                  _englishDescController.text,
                                              arabic_description:
                                                  _arabicDescController.text,
                                              arabic_name:
                                                  _arabicNameController.text,
                                              old_price:
                                                  double.tryParse(
                                                    _oldPriceController.text,
                                                  ) ??
                                                  0.0,
                                              delete_image_url:
                                                  null, // ده هيتظبط بعد الرفع
                                              is_show: _isShow,
                                              weight:
                                                  double.tryParse(
                                                    _weightController.text,
                                                  ) ??
                                                  0.0,
                                            );
                                          },
                                        ),
                                      ],
                                    ),
                                  ),
                          ),
                        ),
                      ),
                    ),
                  ),
                )
              : const Center(child: CircularProgressIndicator());
        },
      
    );
  }
}
